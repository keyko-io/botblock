/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface AutoReleaseEscrowInterface extends utils.Interface {
  functions: {
    "createEscrow(address,uint256,uint256)": FunctionFragment;
    "escrowCount()": FunctionFragment;
    "escrows(uint256)": FunctionFragment;
    "getContractBalance()": FunctionFragment;
    "owner()": FunctionFragment;
    "releaseEscrow(uint256)": FunctionFragment;
    "usdcToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createEscrow"
      | "escrowCount"
      | "escrows"
      | "getContractBalance"
      | "owner"
      | "releaseEscrow"
      | "usdcToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createEscrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseEscrow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;

  events: {
    "EscrowCompleted(uint256,address,address,uint256)": EventFragment;
    "EscrowCreated(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EscrowCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscrowCreated"): EventFragment;
}

export interface EscrowCompletedEventObject {
  escrowId: BigNumber;
  payer: string;
  payee: string;
  amount: BigNumber;
}
export type EscrowCompletedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  EscrowCompletedEventObject
>;

export type EscrowCompletedEventFilter = TypedEventFilter<EscrowCompletedEvent>;

export interface EscrowCreatedEventObject {
  escrowId: BigNumber;
  payer: string;
  payee: string;
  amount: BigNumber;
}
export type EscrowCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  EscrowCreatedEventObject
>;

export type EscrowCreatedEventFilter = TypedEventFilter<EscrowCreatedEvent>;

export interface AutoReleaseEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AutoReleaseEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createEscrow(
      _payee: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrowCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, number] & {
        payer: string;
        payee: string;
        amount: BigNumber;
        expirationTime: BigNumber;
        state: number;
      }
    >;

    getContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    releaseEscrow(
      _escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<[string]>;
  };

  createEscrow(
    _payee: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrowCount(overrides?: CallOverrides): Promise<BigNumber>;

  escrows(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, number] & {
      payer: string;
      payee: string;
      amount: BigNumber;
      expirationTime: BigNumber;
      state: number;
    }
  >;

  getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  releaseEscrow(
    _escrowId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdcToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createEscrow(
      _payee: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrowCount(overrides?: CallOverrides): Promise<BigNumber>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, number] & {
        payer: string;
        payee: string;
        amount: BigNumber;
        expirationTime: BigNumber;
        state: number;
      }
    >;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    releaseEscrow(
      _escrowId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdcToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EscrowCompleted(uint256,address,address,uint256)"(
      escrowId?: null,
      payer?: null,
      payee?: null,
      amount?: null
    ): EscrowCompletedEventFilter;
    EscrowCompleted(
      escrowId?: null,
      payer?: null,
      payee?: null,
      amount?: null
    ): EscrowCompletedEventFilter;

    "EscrowCreated(uint256,address,address,uint256)"(
      escrowId?: null,
      payer?: null,
      payee?: null,
      amount?: null
    ): EscrowCreatedEventFilter;
    EscrowCreated(
      escrowId?: null,
      payer?: null,
      payee?: null,
      amount?: null
    ): EscrowCreatedEventFilter;
  };

  estimateGas: {
    createEscrow(
      _payee: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrowCount(overrides?: CallOverrides): Promise<BigNumber>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    releaseEscrow(
      _escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createEscrow(
      _payee: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrowCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseEscrow(
      _escrowId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
